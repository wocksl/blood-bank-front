name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: frontend
  ECS_SERVICE: frontend-cluster-service
  ECS_CLUSTER: frontend-cluster
  CONTAINER_NAME: frontend

permissions:
  contents: read
  security-events: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build image
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
    
    - name: Build Dockle
      run: |
        docker pull goodwithtech/dockle:latest

    - name: Run Dockle security scan
      continue-on-error: true
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock goodwithtech/dockle $ECR_REPOSITORY:$IMAGE_TAG

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      continue-on-error: true
      with:
        image-ref: '${{ env.ECR_REPOSITORY }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

    - name: Push image to Amazon ECR
      id: push-image
      if: success()
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Retrieve most recent ECS task definition JSON file
      id: retrieve-task-def
      run: |
        TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition frontend-def --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV
        aws ecs describe-task-definition --task-definition frontend-def --query taskDefinition > task-definition.json
        cat task-definition.json
        echo "::set-output name=task-def-file::task-definition.json"
    
    - name: Update appspec.yaml with the latest Task Definition ARN
      run: |
        sed -i "s|\"TaskDefinition\": \"\"|\"TaskDefinition\": \"$TASK_DEFINITION_ARN\"|" appspec.yaml
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.retrieve-task-def.outputs.task-def-file }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.push-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        codedeploy-appspec: appspec.yaml
        codedeploy-application: AppECS-frontend-cluster-frontend-cluster-service
        codedeploy-deployment-group: DgpECS-frontend-cluster-frontend-cluster-service

    - name: Send Slack Message
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,eventName,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEB_HOOK_URL }}
      if: always()